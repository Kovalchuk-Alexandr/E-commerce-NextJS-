// import { URLSearchParams } from "url";
import { Product } from "@/types/product";
interface FilterState {
	category: string[];
	color: string[];
	size: string[];
	price: [number | null, number | null];
}

export async function fetchProductsServer() {
	// Получаем базовый URl: "http://localhost:3050/products"
	const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL;
	const url = `${apiBaseUrl}/products`;

	try {
		console.log("Fetching from:", url);
		const response = await fetch(url);
		const productsData = await response.json();
		// setProducts(productsData);
		console.log("Products loaded:", productsData);
		return productsData;
	} catch (error) {
		console.error("Error fetching products:", error);
	}
}

export async function fetchProductsClient(
	filter: FilterState,
	params: string
): Promise<Product[]> {
	// Получаем базовый URl: "http://localhost:3050/products"
	const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL;
	let url = `${apiBaseUrl}/products`;

	const param = buildProductSearchParams(filter).toString();
	url += `/${param}`;

	console.log("URL: ", url);
	console.log("Params: ", params);
	console.log("Param: ", param);

	// try {
	console.log("Fetching Client from:", url);
	const response = await fetch(url);
	const productsData = await response.json();
	// setProducts(productsData);
	console.log("Products Client loaded:", productsData);
	return productsData;
	// } catch (error) {
	// 	console.error("Error fetching Client products:", error);
	// }
}

// Функция для построения URL на основе фильтров
export function buildProductSearchParams(
	filters: FilterState
): URLSearchParams {
	const params = new URLSearchParams();

	// Добавляем фильтры категорий
	if (filters.category.length > 0) {
		// filters.category.forEach((cat) =>
		// 	params.append("category_like", cat)
		// );
		let sep = "|";
		params.append("category_like", filters.category.join(sep));
	}

	// Добавляем фильтры цветов
	if (filters.color.length > 0) {
		filters.color.forEach((color) => params.append("color_like", color));
	}

	// Добавляем фильтры размеров
	if (filters.size.length > 0) {
		filters.size.forEach((size) => params.append("size_like", size));
	}

	// Добавляем фильтры цены
	if (filters.price[0] !== null) {
		params.append("price_gte", filters.price[0].toString());
	}
	if (filters.price[1] !== null) {
		params.append("price_lte", filters.price[1].toString());
	}

	// const queryString = params.toString();
	// console.log("Querystring: ", queryString);

	// return queryString ? `${baseUrl}?${queryString}` : baseUrl;
	return params;
}
